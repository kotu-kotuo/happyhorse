[debug] [2021-07-19T06:34:23.459Z] ----------------------------------------------------------------------
[debug] [2021-07-19T06:34:23.461Z] Command:       /usr/local/Cellar/nvm/0.37.2/versions/node/v14.3.0/bin/node /usr/local/opt/nvm/versions/node/v14.3.0/bin/firebase emulators:start --only firestore
[debug] [2021-07-19T06:34:23.461Z] CLI Version:   9.12.1
[debug] [2021-07-19T06:34:23.461Z] Platform:      darwin
[debug] [2021-07-19T06:34:23.461Z] Node Version:  v14.3.0
[debug] [2021-07-19T06:34:23.462Z] Time:          Mon Jul 19 2021 15:34:23 GMT+0900 (日本標準時)
[debug] [2021-07-19T06:34:23.462Z] ----------------------------------------------------------------------
[debug] 
[debug] [2021-07-19T06:34:23.464Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2021-07-19T06:34:23.478Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2021-07-19T06:34:23.478Z] > authorizing via signed-in user (ttn022300@gmail.com)
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[debug] [2021-07-19T06:34:23.492Z] [hub] writing locator at /var/folders/27/w2zg31814xxbyglrs0dqcjn40000gn/T/hub-happyhorse-bc5f6.json
[debug] [2021-07-19T06:34:23.551Z] Ignoring unsupported arg: projectId {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: projectId"}}
[debug] [2021-07-19T06:34:23.551Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2021-07-19T06:34:23.551Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/Users/nonoyama/.cache/firebase/emulators/cloud-firestore-emulator-v1.12.0.jar","--host","localhost","--port",8080,"--rules","/Users/nonoyama/happyhorse/firestore.rules"],"optionalArgs":["port","webchannel_port","host","rules","functions_emulator","seed_from_export"],"joinArgs":false} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/Users/nonoyama/.cache/firebase/emulators/cloud-firestore-emulator-v1.12.0.jar\",\"--host\",\"localhost\",\"--port\",8080,\"--rules\",\"/Users/nonoyama/happyhorse/firestore.rules\"],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"functions_emulator\",\"seed_from_export\"],\"joinArgs\":false}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to \u001b[1mfirestore-debug.log\u001b[22m"}}
[debug] [2021-07-19T06:34:24.259Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2021-07-19T06:34:24.259Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2021-07-19T06:34:25.069Z] Jul 19, 2021 3:34:25 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://localhost:59768
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:34:25 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://localhost:59768\n"}}
[debug] [2021-07-19T06:34:25.090Z] API endpoint: http://localhost: {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://localhost:"}}
[debug] [2021-07-19T06:34:25.090Z] 8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=localhost:8080

Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=localhost:8080\n\nDev App Server is now running.\n\n"}}
[debug] [2021-07-19T06:34:25.193Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2021-07-19T06:34:25.193Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: port"}}
[debug] [2021-07-19T06:34:25.193Z] Starting Emulator UI with command {"binary":"node","args":["/Users/nonoyama/.cache/firebase/emulators/ui-v1.5.0/server.bundle.js"],"optionalArgs":[],"joinArgs":false} {"metadata":{"emulator":{"name":"ui"},"message":"Starting Emulator UI with command {\"binary\":\"node\",\"args\":[\"/Users/nonoyama/.cache/firebase/emulators/ui-v1.5.0/server.bundle.js\"],\"optionalArgs\":[],\"joinArgs\":false}"}}
[info] i  ui: Emulator UI logging to ui-debug.log {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI logging to \u001b[1mui-debug.log\u001b[22m"}}
[debug] [2021-07-19T06:34:25.281Z] Web / API server started at http://localhost:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at http://localhost:4000\n"}}
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://localhost:4000                │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ localhost:8080 │ http://localhost:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub running at localhost:4400
  Other reserved ports: 4500

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2021-07-19T06:34:49.604Z] Jul 19, 2021 3:34:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:34:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:34:49.780Z] Jul 19, 2021 3:34:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:34:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:34:51.002Z] Jul 19, 2021 3:34:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:34:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:40:23.775Z] Jul 19, 2021 3:40:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:40:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:40:24.215Z] Jul 19, 2021 3:40:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:40:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:43:53.590Z] Jul 19, 2021 3:43:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:43:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:43:54.018Z] Jul 19, 2021 3:43:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:43:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:47:40.701Z] Jul 19, 2021 3:47:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:47:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:47:41.144Z] Jul 19, 2021 3:47:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:47:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:53:40.418Z] Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:53:40.864Z] Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T06:53:40.949Z] Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 3:53:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:04:15.045Z] Jul 19, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:08:48.769Z] Jul 19, 2021 4:08:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:08:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:10:14.884Z] Jul 19, 2021 4:10:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:10:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:10:15.294Z] Jul 19, 2021 4:10:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:10:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:10:15.375Z] Jul 19, 2021 4:10:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:10:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:21:50.270Z] Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:21:50.804Z] Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:21:50.888Z] Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:21:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:25:03.143Z] Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:25:03.488Z] Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T07:25:03.592Z] Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 4:25:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:22:09.019Z] Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:22:09.414Z] Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:22:09.494Z] Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:22:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:23:38.743Z] Jul 19, 2021 6:23:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:23:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:23:39.161Z] Jul 19, 2021 6:23:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:23:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:30:17.694Z] Jul 19, 2021 6:30:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:30:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:30:18.096Z] Jul 19, 2021 6:30:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:30:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:31:05.461Z] Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:31:05.855Z] Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:31:05.927Z] Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:36:36.676Z] Jul 19, 2021 6:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:36:37.035Z] Jul 19, 2021 6:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:36:37.101Z] Jul 19, 2021 6:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:38:25.971Z] Jul 19, 2021 6:38:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:38:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:38:26.288Z] Jul 19, 2021 6:38:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:38:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:44:21.448Z] Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:44:21.757Z] Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:44:21.865Z] Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:44:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:58:49.541Z] Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:58:49.542Z] Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T09:58:49.941Z] Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 19, 2021 6:58:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:03:57.293Z] Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:03:57.301Z] Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:03:57.340Z] Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:03:57.833Z] Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:03:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:50:24.667Z] Jul 20, 2021 8:50:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:50:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:50:25.074Z] Jul 20, 2021 8:50:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:50:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:50:25.221Z] Jul 20, 2021 8:50:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:50:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:53:11.936Z] Jul 20, 2021 8:53:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:53:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:53:12.260Z] Jul 20, 2021 8:53:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:53:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-19T23:53:12.373Z] Jul 20, 2021 8:53:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 8:53:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:11.388Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:11.470Z] Jul 20, 2021 9:46:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:11.691Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"274"}
[warn] ⚠  firestore.rules:13:9 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:13.192Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:13.197Z] Jul 20, 2021 9:46:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:13.256Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:14.379Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:14.384Z] Jul 20, 2021 9:46:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:14.427Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:14.478Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:14.481Z] Jul 20, 2021 9:46:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:14.518Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:17.998Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create:\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:18.002Z] Jul 20, 2021 9:46:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:18.066Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"245"}
[warn] ⚠  firestore.rules:13:9 - ERROR Unexpected 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:19.974Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:19.977Z] Jul 20, 2021 9:46:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:20.002Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"268"}
[warn] ⚠  firestore.rules:13:9 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:24.036Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if ;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:24.042Z] Jul 20, 2021 9:46:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:24.078Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:12:26 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:24.137Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if ;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:24.140Z] Jul 20, 2021 9:46:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:24.166Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:12:26 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:29.334Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:29.337Z] Jul 20, 2021 9:46:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:29.372Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3211"}
[warn] ⚠  firestore.rules:12:26 - WARNING Invalid variable name: incomingData. 
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:34.840Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData();\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:34.844Z] Jul 20, 2021 9:46:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:34.877Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:37.363Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:37.366Z] Jul 20, 2021 9:46:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:37.396Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"242"}
[warn] ⚠  firestore.rules:12:41 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:40.355Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:40.357Z] Jul 20, 2021 9:46:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:40.393Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:42.803Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID === ;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:42.806Z] Jul 20, 2021 9:46:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:42.838Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:12:50 - ERROR mismatched input '=' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:46:42.904Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID === ;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:46:42.906Z] Jul 20, 2021 9:46:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:46:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:46:42.933Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:12:50 - ERROR mismatched input '=' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:36.104Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID ;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:36.106Z] Jul 20, 2021 9:47:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:36.138Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:39.133Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID is;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:39.136Z] Jul 20, 2021 9:47:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:39.162Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"671"}
[warn] ⚠  firestore.rules:12:50 - ERROR An unsupported type identifier was used with the 'is' operator. Received <missing IDENTIFIER>. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff 
[warn] ⚠  firestore.rules:12:50 - ERROR missing IDENTIFIER at ';' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:39.235Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID is;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:39.238Z] Jul 20, 2021 9:47:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:39.262Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"671"}
[warn] ⚠  firestore.rules:12:50 - ERROR An unsupported type identifier was used with the 'is' operator. Received <missing IDENTIFIER>. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff 
[warn] ⚠  firestore.rules:12:50 - ERROR missing IDENTIFIER at ';' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:42.463Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID isUserAuthenticated;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:42.465Z] Jul 20, 2021 9:47:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:42.488Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"260"}
[warn] ⚠  firestore.rules:12:48 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:42.565Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID isUserAuthenticated;\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:42.567Z] Jul 20, 2021 9:47:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:42.592Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"260"}
[warn] ⚠  firestore.rules:12:48 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:43.629Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID isUserAuthenticated();\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:43.636Z] Jul 20, 2021 9:47:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:43.660Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"260"}
[warn] ⚠  firestore.rules:12:48 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:43.731Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if incomingData().userID isUserAuthenticated();\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:43.734Z] Jul 20, 2021 9:47:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:43.757Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"260"}
[warn] ⚠  firestore.rules:12:48 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:47.648Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if  isUserAuthenticated();\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:47.650Z] Jul 20, 2021 9:47:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:47.684Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3247"}
[warn] ⚠  firestore.rules:12:27 - WARNING Incorrect number of arguments supplied to function: isUserAuthenticated. 
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:49.813Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if  isUserAuthenticated(incomingData().userID);\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:49.816Z] Jul 20, 2021 9:47:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:49.848Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:50.699Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if  isUserAuthenticated(incomingData().userID);\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:50.702Z] Jul 20, 2021 9:47:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:50.732Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:50.799Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if  isUserAuthenticated(incomingData().userID);\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:50.801Z] Jul 20, 2021 9:47:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:50.830Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:47:53.959Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:47:53.961Z] Jul 20, 2021 9:47:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:47:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:47:53.994Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:104:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:132:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:03.176Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:03.178Z] Jul 20, 2021 9:48:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:03.207Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:06.196Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:06.198Z] Jul 20, 2021 9:48:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:06.222Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"274"}
[warn] ⚠  firestore.rules:14:9 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:07.481Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:07.490Z] Jul 20, 2021 9:48:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:07.513Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"274"}
[warn] ⚠  firestore.rules:14:9 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:07.582Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:07.584Z] Jul 20, 2021 9:48:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:07.606Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"274"}
[warn] ⚠  firestore.rules:14:9 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:10.557Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:10.559Z] Jul 20, 2021 9:48:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:10.592Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:10.657Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:10.659Z] Jul 20, 2021 9:48:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:10.687Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:14.393Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if \n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:14.395Z] Jul 20, 2021 9:48:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:14.417Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"268"}
[warn] ⚠  firestore.rules:14:9 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:17.393Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:17.395Z] Jul 20, 2021 9:48:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:17.428Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3214"}
[warn] ⚠  firestore.rules:13:26 - WARNING Invalid variable name: isAuthenticated. 
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:18.439Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated()\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:18.441Z] Jul 20, 2021 9:48:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:18.472Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:18.540Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated()\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:18.542Z] Jul 20, 2021 9:48:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:18.571Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:19.934Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated();\n        allow write: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:19.936Z] Jul 20, 2021 9:48:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:19.967Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:25.184Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:25.187Z] Jul 20, 2021 9:48:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:25.218Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:35.725Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:35.727Z] Jul 20, 2021 9:48:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:35.751Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:35.825Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:35.827Z] Jul 20, 2021 9:48:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:35.850Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T00:48:36.174Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T00:48:36.177Z] Jul 20, 2021 9:48:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:48:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:48:36.205Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T00:49:00.825Z] Jul 20, 2021 9:49:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:49:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:49:01.228Z] Jul 20, 2021 9:49:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:49:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T00:49:01.340Z] Jul 20, 2021 9:49:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 9:49:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:05:45.700Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:05:45.713Z] Jul 20, 2021 11:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:05:45.736Z] Jul 20, 2021 11:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:05:45.815Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:05:49.870Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || ;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:05:49.873Z] Jul 20, 2021 11:05:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:05:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:05:49.933Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:13:72 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:05:49.969Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || ;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:05:49.971Z] Jul 20, 2021 11:05:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:05:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:05:49.998Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:13:72 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:41.609Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:41.616Z] Jul 20, 2021 11:12:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:41.655Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:42.445Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:42.448Z] Jul 20, 2021 11:12:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:42.475Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"242"}
[warn] ⚠  firestore.rules:13:80 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:44.196Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:44.198Z] Jul 20, 2021 11:12:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:44.229Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:46.805Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.ui;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:46.807Z] Jul 20, 2021 11:12:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:46.841Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:49.778Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in ;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:49.780Z] Jul 20, 2021 11:12:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:49.806Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:13:92 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:49.878Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in ;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:49.883Z] Jul 20, 2021 11:12:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:49.908Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:13:92 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:55.447Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:55.449Z] Jul 20, 2021 11:12:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:55.480Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:55.546Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:55.548Z] Jul 20, 2021 11:12:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:55.579Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:12:57.528Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:12:57.530Z] Jul 20, 2021 11:12:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:12:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:12:57.553Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:13:107 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:13:01.615Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:13:01.618Z] Jul 20, 2021 11:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:13:01.648Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:13:02.767Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:13:02.769Z] Jul 20, 2021 11:13:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:13:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:13:02.799Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:13:05.357Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:13:05.359Z] Jul 20, 2021 11:13:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:13:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:13:05.392Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:105:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:133:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:05.111Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      \n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:05.113Z] Jul 20, 2021 11:15:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:05.143Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:12.558Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:12.561Z] Jul 20, 2021 11:15:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:12.593Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:15.986Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: if \n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:15.990Z] Jul 20, 2021 11:15:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:16.013Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"268"}
[warn] ⚠  firestore.rules:11:7 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:27.430Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID);\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:27.432Z] Jul 20, 2021 11:15:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:27.455Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:30.143Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:30.146Z] Jul 20, 2021 11:15:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:30.170Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:30.242Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:30.245Z] Jul 20, 2021 11:15:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:30.267Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:32.407Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:32.410Z] Jul 20, 2021 11:15:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:32.440Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"683"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:69 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:35.718Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incm;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:35.720Z] Jul 20, 2021 11:15:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:35.744Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:37.456Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:37.458Z] Jul 20, 2021 11:15:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:37.481Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"683"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:69 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:39.708Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && ic;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:39.711Z] Jul 20, 2021 11:15:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:39.735Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:41.233Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:41.236Z] Jul 20, 2021 11:15:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:41.261Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"683"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:69 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:44.723Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && come;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:44.725Z] Jul 20, 2021 11:15:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:44.748Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:48.133Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && inco;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:48.135Z] Jul 20, 2021 11:15:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:48.158Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:49.457Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:49.459Z] Jul 20, 2021 11:15:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:49.482Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:49.568Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:49.572Z] Jul 20, 2021 11:15:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:49.597Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:52.442Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:52.444Z] Jul 20, 2021 11:15:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:52.466Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:59.062Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:59.068Z] Jul 20, 2021 11:15:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:59.104Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"493"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:84 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:15:59.157Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:15:59.158Z] Jul 20, 2021 11:15:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:15:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:15:59.182Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"493"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:84 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:01.192Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().dele;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:01.194Z] Jul 20, 2021 11:16:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:01.216Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:05.758Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:05.761Z] Jul 20, 2021 11:16:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:05.784Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:23.629Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:23.631Z] Jul 20, 2021 11:16:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:23.656Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:27.824Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount ==;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:27.826Z] Jul 20, 2021 11:16:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:27.851Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"684"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:101 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:29.214Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:29.217Z] Jul 20, 2021 11:16:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:29.242Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"684"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:102 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:29.315Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == ;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:29.318Z] Jul 20, 2021 11:16:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:29.342Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"684"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:9:102 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:34.798Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:34.802Z] Jul 20, 2021 11:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:34.831Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:34.898Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:34.900Z] Jul 20, 2021 11:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:34.924Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:37.303Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update, delete: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:37.306Z] Jul 20, 2021 11:16:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:37.331Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:16:54.030Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: ifisUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:16:54.032Z] Jul 20, 2021 11:16:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:16:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:16:54.055Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"269"}
[warn] ⚠  firestore.rules:9:21 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:17:07.021Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:17:07.023Z] Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:17:07.054Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:17:07.703Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:17:07.706Z] Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:17:07.734Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:17:07.805Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().userID;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:17:07.808Z] Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:17:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:17:07.838Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:17:58.157Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:17:58.159Z] Jul 20, 2021 11:17:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:17:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:17:58.188Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:17:59.170Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:17:59.173Z] Jul 20, 2021 11:17:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:17:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:17:59.203Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:34:51.070Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || ;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:34:51.073Z] Jul 20, 2021 11:34:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:34:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:34:51.098Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"433"}
[warn] ⚠  firestore.rules:14:129 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:34:53.724Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || get;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:34:53.726Z] Jul 20, 2021 11:34:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:34:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:34:53.758Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3203"}
[warn] ⚠  firestore.rules:14:129 - WARNING Invalid variable name: get. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:34:53.825Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || get;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:34:53.827Z] Jul 20, 2021 11:34:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:34:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:34:53.858Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3203"}
[warn] ⚠  firestore.rules:14:129 - WARNING Invalid variable name: get. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:34:58.665Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfter;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:34:58.667Z] Jul 20, 2021 11:34:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:34:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:34:58.704Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3208"}
[warn] ⚠  firestore.rules:14:129 - WARNING Invalid variable name: getAfter. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:34:58.767Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfter;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:34:58.769Z] Jul 20, 2021 11:34:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:34:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:34:58.800Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3208"}
[warn] ⚠  firestore.rules:14:129 - WARNING Invalid variable name: getAfter. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:10.341Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:10.343Z] Jul 20, 2021 11:35:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:10.374Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3033"}
[warn] ⚠  firestore.rules:14:129 - WARNING Incorrect number of arguments supplied to function: getAfterData. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:14.274Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:14.276Z] Jul 20, 2021 11:35:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:14.306Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3004"}
[warn] ⚠  firestore.rules:14:142 - WARNING Invalid variable name: documentPath. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:14.374Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:14.377Z] Jul 20, 2021 11:35:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:14.402Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"3004"}
[warn] ⚠  firestore.rules:14:142 - WARNING Invalid variable name: documentPath. 
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:28.190Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath());\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:28.192Z] Jul 20, 2021 11:35:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:28.222Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2788"}
[warn] ⚠  firestore.rules:14:142 - WARNING Incorrect number of arguments supplied to function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:28.290Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath());\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:28.292Z] Jul 20, 2021 11:35:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:28.318Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2788"}
[warn] ⚠  firestore.rules:14:142 - WARNING Incorrect number of arguments supplied to function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:29.641Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:29.643Z] Jul 20, 2021 11:35:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:29.675Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:29.740Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:29.742Z] Jul 20, 2021 11:35:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:29.771Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:35.000Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\"]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:35.003Z] Jul 20, 2021 11:35:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:35.034Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:35:42.576Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:35:42.578Z] Jul 20, 2021 11:35:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:35:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:35:42.607Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:37:27.507Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",{}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:37:27.509Z] Jul 20, 2021 11:37:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:37:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:37:27.582Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:37:29.882Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",{uid}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:37:29.884Z] Jul 20, 2021 11:37:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:37:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:37:29.910Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:168 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:169 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:37:32.978Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",{uid},]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:37:32.981Z] Jul 20, 2021 11:37:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:37:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:37:33.011Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:168 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:169 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:37:35.291Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",{uid},\"posts\"]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:37:35.293Z] Jul 20, 2021 11:37:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:37:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:37:35.318Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:168 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:169 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:37:37.975Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",{uid},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:37:37.976Z] Jul 20, 2021 11:37:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:37:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:37:37.999Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:168 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:169 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:38:51.037Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${uid},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:38:51.039Z] Jul 20, 2021 11:38:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:38:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:38:51.064Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:170 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:38:57.054Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:38:57.056Z] Jul 20, 2021 11:38:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:38:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:38:57.081Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:167 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:01.021Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData()},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:01.023Z] Jul 20, 2021 11:39:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:01.046Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:181 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:11.253Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:11.256Z] Jul 20, 2021 11:39:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:11.280Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:182 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:11.354Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:11.357Z] Jul 20, 2021 11:39:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:11.380Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:182 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:14.845Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:14.847Z] Jul 20, 2021 11:39:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:14.874Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:32.493Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",$]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:32.495Z] Jul 20, 2021 11:39:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:32.518Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:33.422Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:33.424Z] Jul 20, 2021 11:39:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:33.450Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:200 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:33.522Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:33.524Z] Jul 20, 2021 11:39:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:33.547Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:200 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:36.611Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        }]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:36.614Z] Jul 20, 2021 11:39:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:36.640Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:10 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:37.771Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        ()}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:37.773Z] Jul 20, 2021 11:39:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:37.796Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:12 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:40.825Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        ().}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:40.827Z] Jul 20, 2021 11:39:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:40.851Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:13 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:40.922Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        ().}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:40.924Z] Jul 20, 2021 11:39:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:40.948Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:13 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:46.786Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        ().postID}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:46.788Z] Jul 20, 2021 11:39:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:46.812Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:19 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:48.763Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData\n        ().postID}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:48.765Z] Jul 20, 2021 11:39:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:48.790Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"924"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:15:19 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:39:53.562Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}]));\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:39:53.564Z] Jul 20, 2021 11:39:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:39:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:39:53.588Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:221 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:40:32.705Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:40:32.707Z] Jul 20, 2021 11:40:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:40:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:40:32.731Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:221 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:40:41.870Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).send;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:40:41.872Z] Jul 20, 2021 11:40:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:40:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:40:41.895Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:221 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:40:42.888Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:40:42.890Z] Jul 20, 2021 11:40:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:40:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:40:42.914Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:164 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:188 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:221 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:40:56.640Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:40:56.642Z] Jul 20, 2021 11:40:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:40:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:40:56.667Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1152"}
[warn] ⚠  firestore.rules:14:129 - ERROR Unexpected 'in'. 
[warn] ⚠  firestore.rules:14:167 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:191 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:224 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:41:11.738Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || requestin getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:41:11.740Z] Jul 20, 2021 11:41:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:11.763Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"936"}
[warn] ⚠  firestore.rules:14:139 - ERROR Unexpected 'getAfterData'. 
[warn] ⚠  firestore.rules:14:198 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:231 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:41:14.096Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.authin getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:41:14.099Z] Jul 20, 2021 11:41:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:14.124Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"936"}
[warn] ⚠  firestore.rules:14:144 - ERROR Unexpected 'getAfterData'. 
[warn] ⚠  firestore.rules:14:203 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:236 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:41:16.693Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:41:16.695Z] Jul 20, 2021 11:41:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:16.720Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:41:19.020Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:41:19.022Z] Jul 20, 2021 11:41:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:19.045Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:41:20.275Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:41:20.278Z] Jul 20, 2021 11:41:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:20.301Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:41:47.577Z] Jul 20, 2021 11:41:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:41:47.606Z] Jul 20, 2021 11:41:47 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:47 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)\n\t... 24 more\n\n"}}
[debug] [2021-07-20T02:41:47.614Z] Jul 20, 2021 11:41:47 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:41:47 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:51:15.301Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:51:15.304Z] Jul 20, 2021 11:51:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:51:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:51:15.336Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:51:42.923Z] Jul 20, 2021 11:51:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:51:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:51:43.305Z] Jul 20, 2021 11:51:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:51:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:51:43.419Z] Jul 20, 2021 11:51:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:51:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:51:57.433Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:51:57.435Z] Jul 20, 2021 11:51:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:51:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:51:57.462Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:52:19.802Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if (isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:52:19.805Z] Jul 20, 2021 11:52:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:52:19.834Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:185 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:209 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:242 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:52:23.425Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if (isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:52:23.427Z] Jul 20, 2021 11:52:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:52:23.451Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:185 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:209 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:242 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:52:23.528Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if (isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:52:23.533Z] Jul 20, 2021 11:52:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:52:23.565Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:185 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:209 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:242 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:52:24.855Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if (isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:52:24.857Z] Jul 20, 2021 11:52:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:52:24.882Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:185 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:209 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:242 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:52:49.794Z] Jul 20, 2021 11:52:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:52:49.812Z] Jul 20, 2021 11:52:49 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L14:185 Unexpected '$'.
L14:209 Unexpected ','.
L14:242 Unexpected ']'.
L60:5 Unexpected 'match'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L14:185 Unexpected '$'.
L14:209 Unexpected ','.
L14:242 Unexpected ']'.
L60:5 Unexpected 'match'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:49 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL14:185 Unexpected '$'.\nL14:209 Unexpected ','.\nL14:242 Unexpected ']'.\nL60:5 Unexpected 'match'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL14:185 Unexpected '$'.\nL14:209 Unexpected ','.\nL14:242 Unexpected ']'.\nL60:5 Unexpected 'match'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)\n\t... 24 more\n\n"}}
[debug] [2021-07-20T02:52:49.813Z] Jul 20, 2021 11:52:49 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L14:185 Unexpected '$'.
L14:209 Unexpected ','.
L14:242 Unexpected ']'.
L60:5 Unexpected 'match'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:52:49 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL14:185 Unexpected '$'.\nL14:209 Unexpected ','.\nL14:242 Unexpected ']'.\nL60:5 Unexpected 'match'.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:53:19.823Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:53:19.826Z] Jul 20, 2021 11:53:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:53:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:53:19.854Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:53:22.490Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:53:22.492Z] Jul 20, 2021 11:53:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:53:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:53:22.516Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:53:59.145Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:53:59.147Z] Jul 20, 2021 11:53:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:53:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:53:59.201Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2963"}
[warn] ⚠  firestore.rules:106:13 - WARNING Unused function: documentPath. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: getAfterData. 
[warn] ⚠  firestore.rules:134:14 - WARNING Invalid function name: getAfter. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:54:14.238Z] Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:54:14.617Z] Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:54:14.729Z] Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:54:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:56:52.095Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${incomingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:56:52.098Z] Jul 20, 2021 11:56:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:56:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:56:52.127Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:57:42.303Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${existingData().userID},\"posts\",${incomingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:57:42.306Z] Jul 20, 2021 11:57:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:57:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:57:42.329Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:57:46.676Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${existingData().userID},\"posts\",${ingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:57:46.678Z] Jul 20, 2021 11:57:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:57:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:57:46.705Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:236 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:57:46.776Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${existingData().userID},\"posts\",${ingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:57:46.779Z] Jul 20, 2021 11:57:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:57:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:57:46.802Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:236 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:57:49.678Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${existingData().userID},\"posts\",${existingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:57:49.681Z] Jul 20, 2021 11:57:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:57:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:57:49.706Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:57:49.779Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",${existingData().userID},\"posts\",${existingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:57:49.781Z] Jul 20, 2021 11:57:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:57:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:57:49.806Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:184 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:208 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:241 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:58:14.179Z] Jul 20, 2021 11:58:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:14.199Z] Jul 20, 2021 11:58:14 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)
	at com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)
	at com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:14 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:109)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:68)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.setSecurityRules(CloudFirestoreV1.java:575)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.setSecurityRules(CloudFirestoreV1Router.java:187)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.lambda$setSecurityRules$0(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.unary(EmulatorAuxiliaryGrpcAdapter.java:49)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter.access$000(EmulatorAuxiliaryGrpcAdapter.java:28)\n\tat com.google.cloud.datastore.emulator.firestore.EmulatorAuxiliaryGrpcAdapter$1.setSecurityRules(EmulatorAuxiliaryGrpcAdapter.java:68)\n\tat com.google.firestore.emulator.v1.FirestoreEmulatorGrpc$MethodHandlers.invoke(FirestoreEmulatorGrpc.java:618)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:95)\n\t... 24 more\n\n"}}
[debug] [2021-07-20T02:58:14.200Z] Jul 20, 2021 11:58:14 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L14:184 Unexpected '$'.
L14:208 Unexpected ','.
L14:241 Unexpected ']'.
L60:5 Unexpected 'match'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:14 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL14:184 Unexpected '$'.\nL14:208 Unexpected ','.\nL14:241 Unexpected ']'.\nL60:5 Unexpected 'match'.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:46.900Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID},\"posts\",${existingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:46.906Z] Jul 20, 2021 11:58:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:46.934Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"925"}
[warn] ⚠  firestore.rules:14:205 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:206 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:14:239 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:60:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:49.579Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",${existingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:49.582Z] Jul 20, 2021 11:58:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:49.608Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:214 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:14:238 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:52.043Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",existingData().postID}])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:52.047Z] Jul 20, 2021 11:58:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:52.077Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"696"}
[warn] ⚠  firestore.rules:14:235 - ERROR Unexpected '}'. 
[warn] ⚠  firestore.rules:14:236 - ERROR Unexpected ']'. 
[warn] ⚠  firestore.rules:103:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:54.269Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:54.271Z] Jul 20, 2021 11:58:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:54.305Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:54.367Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:54.369Z] Jul 20, 2021 11:58:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:54.398Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:55.472Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:55.474Z] Jul 20, 2021 11:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:55.505Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:58:55.573Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",existingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:58:55.575Z] Jul 20, 2021 11:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:58:55.607Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T02:59:14.787Z] Jul 20, 2021 11:59:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:15.190Z] Jul 20, 2021 11:59:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:15.298Z] Jul 20, 2021 11:59:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:37.792Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incoingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:37.794Z] Jul 20, 2021 11:59:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:37.826Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2511"}
[warn] ⚠  firestore.rules:14:184 - WARNING Invalid function name: incoingData. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:39.010Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:39.014Z] Jul 20, 2021 11:59:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:39.045Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:39.110Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",existingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:39.112Z] Jul 20, 2021 11:59:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:39.141Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2263"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:43.936Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",ingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:43.938Z] Jul 20, 2021 11:59:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:43.970Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2754"}
[warn] ⚠  firestore.rules:14:214 - WARNING Invalid function name: ingData. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:44.036Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",ingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:44.038Z] Jul 20, 2021 11:59:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:44.064Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2754"}
[warn] ⚠  firestore.rules:14:214 - WARNING Invalid function name: ingData. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:46.860Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",inmoingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:46.862Z] Jul 20, 2021 11:59:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:46.894Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2758"}
[warn] ⚠  firestore.rules:14:214 - WARNING Invalid function name: inmoingData. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:48.750Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",iningData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:48.752Z] Jul 20, 2021 11:59:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:48.785Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2756"}
[warn] ⚠  firestore.rules:14:214 - WARNING Invalid function name: iningData. 
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:50.294Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:50.297Z] Jul 20, 2021 11:59:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:50.329Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:55.867Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:55.869Z] Jul 20, 2021 11:59:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:55.898Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T02:59:55.968Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T02:59:55.969Z] Jul 20, 2021 11:59:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 11:59:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T02:59:56.001Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T03:00:16.311Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n      allow write;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T03:00:16.314Z] Jul 20, 2021 12:00:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:00:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:00:16.342Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T03:00:37.192Z] Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:00:37.501Z] Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:00:37.597Z] Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:00:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T03:21:25.940Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T03:21:25.943Z] Jul 20, 2021 12:21:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:21:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:21:25.973Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T03:24:17.006Z] Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:24:17.408Z] Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T03:24:17.527Z] Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 12:24:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:57.402Z] Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:57.406Z] Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:57.445Z] Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:57.955Z] Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:57.957Z] Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:35:58.088Z] Jul 20, 2021 2:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:20.382Z] Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:20.685Z] Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:20.781Z] Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:20.864Z] Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:21.148Z] Jul 20, 2021 2:45:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:45:21.240Z] Jul 20, 2021 2:45:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:45:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:02.281Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() ;\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:02.287Z] Jul 20, 2021 2:54:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:02.318Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:06.285Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && ;\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:06.288Z] Jul 20, 2021 2:54:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:06.313Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"432"}
[warn] ⚠  firestore.rules:18:47 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:07.571Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && ();\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:07.573Z] Jul 20, 2021 2:54:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:07.599Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"242"}
[warn] ⚠  firestore.rules:18:48 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:39.342Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (re);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:39.345Z] Jul 20, 2021 2:54:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:39.375Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2748"}
[warn] ⚠  firestore.rules:18:48 - WARNING Invalid variable name: re. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:42.090Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:42.092Z] Jul 20, 2021 2:54:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:42.121Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:43.283Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:43.289Z] Jul 20, 2021 2:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:43.312Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"242"}
[warn] ⚠  firestore.rules:18:56 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:43.383Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:43.385Z] Jul 20, 2021 2:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:43.408Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"242"}
[warn] ⚠  firestore.rules:18:56 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:45.820Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:45.826Z] Jul 20, 2021 2:54:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:45.857Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:45.922Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:45.924Z] Jul 20, 2021 2:54:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:45.954Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:48.900Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid );\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:48.902Z] Jul 20, 2021 2:54:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:48.930Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:50.659Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == );\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:50.661Z] Jul 20, 2021 2:54:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:50.686Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"657"}
[warn] ⚠  firestore.rules:18:68 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:68 - ERROR mismatched input ')' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:57.700Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == ());\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:57.702Z] Jul 20, 2021 2:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:57.725Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"467"}
[warn] ⚠  firestore.rules:18:69 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:69 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:54:57.800Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == ());\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:54:57.802Z] Jul 20, 2021 2:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:54:57.826Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"467"}
[warn] ⚠  firestore.rules:18:69 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:69 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:05.585Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData()));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:05.586Z] Jul 20, 2021 2:55:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:05.618Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:07.500Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:07.502Z] Jul 20, 2021 2:55:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:07.526Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"467"}
[warn] ⚠  firestore.rules:18:84 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:84 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:16.946Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:16.948Z] Jul 20, 2021 2:55:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:16.978Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:35.279Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID ));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:35.281Z] Jul 20, 2021 2:55:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:35.311Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:36.707Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || ));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:36.710Z] Jul 20, 2021 2:55:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:36.734Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"882"}
[warn] ⚠  firestore.rules:18:98 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:98 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:98 - ERROR mismatched input ')' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:40.304Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData()));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:40.306Z] Jul 20, 2021 2:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:40.337Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:40.404Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData()));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:40.407Z] Jul 20, 2021 2:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:40.436Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:43.029Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:43.031Z] Jul 20, 2021 2:55:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:43.056Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"695"}
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:43.130Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:43.132Z] Jul 20, 2021 2:55:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:43.157Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"695"}
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:18:113 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:45.200Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().post));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:45.202Z] Jul 20, 2021 2:55:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:45.232Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:48.376Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:48.378Z] Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:48.409Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:48.476Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:48.479Z] Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:48.509Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:48.640Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:48.641Z] Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:48.671Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:55:48.741Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == (incomingData().sendUserID || incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:55:48.743Z] Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:55:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:55:48.775Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T05:57:34.330Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:57:34.335Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:57:34.666Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:57:34.673Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:57:34.776Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:57:34.780Z] Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:57:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:20.106Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:20.109Z] Jul 20, 2021 2:58:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:20.137Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:18:123 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:22.417Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:22.421Z] Jul 20, 2021 2:58:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:22.459Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:36.595Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:36.597Z] Jul 20, 2021 2:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:36.622Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"491"}
[warn] ⚠  firestore.rules:18:114 - ERROR Unexpected 'incomingData'. 
[warn] ⚠  firestore.rules:18:114 - ERROR Unexpected 'incomingData'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:36.695Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:36.697Z] Jul 20, 2021 2:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:36.720Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"491"}
[warn] ⚠  firestore.rules:18:114 - ERROR Unexpected 'incomingData'. 
[warn] ⚠  firestore.rules:18:114 - ERROR Unexpected 'incomingData'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:39.012Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid == incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:39.014Z] Jul 20, 2021 2:58:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:39.045Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:39.114Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid == incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:39.116Z] Jul 20, 2021 2:58:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:39.144Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:41.510Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid == incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:41.512Z] Jul 20, 2021 2:58:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:41.541Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T05:58:41.612Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (request.auth.uid == incomingData().sendUserID || request.auth.uid == incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T05:58:41.613Z] Jul 20, 2021 2:58:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 2:58:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T05:58:41.638Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:24.707Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && isUserAuthenticated(incomingData().sendUserID) || request.auth.uid == incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:24.709Z] Jul 20, 2021 3:03:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:24.734Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:18:142 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:31.005Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().sendUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:31.007Z] Jul 20, 2021 3:03:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:31.037Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:31.106Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().sendUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:31.108Z] Jul 20, 2021 3:03:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:31.137Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:37.017Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:37.020Z] Jul 20, 2021 3:03:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:37.049Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:38.778Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:38.779Z] Jul 20, 2021 3:03:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:38.809Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:50.061Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:50.063Z] Jul 20, 2021 3:03:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:50.087Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:18:144 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:55.418Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:55.421Z] Jul 20, 2021 3:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:55.452Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:55.519Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:55.522Z] Jul 20, 2021 3:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:55.551Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:03:59.599Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID);\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:03:59.601Z] Jul 20, 2021 3:03:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:03:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:03:59.631Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:04:53.891Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) ;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:04:53.893Z] Jul 20, 2021 3:04:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:04:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:04:53.921Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:04:55.512Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) &&;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:04:55.514Z] Jul 20, 2021 3:04:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:04:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:04:55.538Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:19:77 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:04:55.612Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) &&;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:04:55.614Z] Jul 20, 2021 3:04:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:04:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:04:55.639Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:19:77 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:04:56.724Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && ;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:04:56.726Z] Jul 20, 2021 3:04:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:04:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:04:56.750Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:19:78 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:01.291Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && ic;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:01.293Z] Jul 20, 2021 3:05:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:01.328Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2750"}
[warn] ⚠  firestore.rules:19:78 - WARNING Invalid variable name: ic. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:02.349Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && i;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:02.351Z] Jul 20, 2021 3:05:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:02.382Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2749"}
[warn] ⚠  firestore.rules:19:78 - WARNING Invalid variable name: i. 
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:05.528Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData();\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:05.530Z] Jul 20, 2021 3:05:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:05.558Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:10.629Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().message;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:10.632Z] Jul 20, 2021 3:05:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:10.662Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:10.730Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().message;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:10.732Z] Jul 20, 2021 3:05:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:10.760Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:12.174Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageC;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:12.176Z] Jul 20, 2021 3:05:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:12.206Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:12.274Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageC;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:12.276Z] Jul 20, 2021 3:05:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:12.304Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:16.341Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:16.344Z] Jul 20, 2021 3:05:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:16.372Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:24.941Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:24.942Z] Jul 20, 2021 3:05:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:24.973Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:26.683Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:26.685Z] Jul 20, 2021 3:05:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:26.715Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:35.733Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:35.762Z] Jul 20, 2021 3:05:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:35.795Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:35.833Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:35.838Z] Jul 20, 2021 3:05:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:35.865Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:05:39.518Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:05:39.520Z] Jul 20, 2021 3:05:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:05:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:05:39.549Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T06:06:06.002Z] Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nJul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:06.361Z] Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:06.364Z] Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:06.458Z] Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:06.458Z] Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:48.265Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n          allow\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:48.269Z] Jul 20, 2021 3:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:48.293Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"277"}
[warn] ⚠  firestore.rules:23:11 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:50.512Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n          allow delete\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:50.514Z] Jul 20, 2021 3:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:50.543Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:50.613Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n          allow delete\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:50.616Z] Jul 20, 2021 3:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:50.646Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:54.358Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update, delete: if isAuthenticated();\n          allow delete;\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:54.360Z] Jul 20, 2021 3:06:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:54.388Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:59.760Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated();\n          allow delete;\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:59.762Z] Jul 20, 2021 3:06:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:59.793Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:06:59.859Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated();\n          allow delete;\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:06:59.861Z] Jul 20, 2021 3:06:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:06:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:06:59.889Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:07:41.619Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete;\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:07:41.621Z] Jul 20, 2021 3:07:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:07:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:07:41.651Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:12:59.310Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:12:59.313Z] Jul 20, 2021 3:12:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:12:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:12:59.337Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"263"}
[warn] ⚠  firestore.rules:21:24 - ERROR Missing ':' before 'if' condition. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:13:23.741Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().sendUserID) || isUserAuthenticated(existingData().postUserID);\n      // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID);\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:13:23.744Z] Jul 20, 2021 3:13:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:13:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:13:23.774Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:108:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:129:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:130:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:134:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:138:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:157:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T06:14:48.034Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:14:48.034Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:14:48.386Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:14:48.386Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:14:48.483Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:14:48.484Z] Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:14:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:19:00.243Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n      \n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:19:00.246Z] Jul 20, 2021 3:19:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:19:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:19:00.277Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:107:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:129:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:133:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:137:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:146:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:156:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:19:02.659Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read, write: if isAuthenticated();\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:19:02.661Z] Jul 20, 2021 3:19:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:19:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:19:02.691Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:19:26.007Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated();\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:19:26.009Z] Jul 20, 2021 3:19:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:19:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:19:26.045Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:20:19.525Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:20:19.526Z] Jul 20, 2021 3:20:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:20:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:20:19.555Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:20:21.923Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:20:21.925Z] Jul 20, 2021 3:20:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:20:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:20:21.955Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T06:20:22.024Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow update: if isAuthenticated() && (incomingData().userID == userID || incomingData().messageReceiverID == userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T06:20:22.026Z] Jul 20, 2021 3:20:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 3:20:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T06:20:22.055Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:04:15.263Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            \n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:04:15.266Z] Jul 20, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:04:15.271Z] Jul 20, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:04:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:04:15.304Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:106:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:128:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:132:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:136:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:139:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:145:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:155:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:04:17.212Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:04:17.214Z] Jul 20, 2021 4:04:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:04:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:04:17.249Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:04:17.313Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated();\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:04:17.316Z] Jul 20, 2021 4:04:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:04:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:04:17.342Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:00.018Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:00.020Z] Jul 20, 2021 4:16:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:00.051Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:21.353Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().postUserID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:21.355Z] Jul 20, 2021 4:16:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:21.386Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:33.880Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:33.883Z] Jul 20, 2021 4:16:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:33.907Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:24:131 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:24:131 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:33.982Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:33.984Z] Jul 20, 2021 4:16:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:34.010Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:24:131 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:24:131 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:41.798Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReseiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:41.800Z] Jul 20, 2021 4:16:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:41.831Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:51.629Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:51.631Z] Jul 20, 2021 4:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:51.661Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:51.730Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:51.732Z] Jul 20, 2021 4:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:51.761Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:16:58.516Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:16:58.517Z] Jul 20, 2021 4:16:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:16:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:16:58.547Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:17:03.004Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID) );\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:17:03.006Z] Jul 20, 2021 4:17:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:17:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:17:03.035Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:17:05.047Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:17:05.051Z] Jul 20, 2021 4:17:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:17:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:17:05.083Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:17:05.148Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID);\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:17:05.150Z] Jul 20, 2021 4:17:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:17:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:17:05.180Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:23:53.447Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) ;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:23:53.450Z] Jul 20, 2021 4:23:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:23:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:23:53.479Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:23:56.603Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) &&;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:23:56.605Z] Jul 20, 2021 4:23:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:23:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:23:56.631Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:25:75 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:23:56.703Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) &&;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:23:56.705Z] Jul 20, 2021 4:23:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:23:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:23:56.731Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:25:75 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:23:57.827Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && ;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:23:57.830Z] Jul 20, 2021 4:23:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:23:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:23:57.855Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:25:76 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:06.266Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData();\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:06.268Z] Jul 20, 2021 4:24:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:06.296Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:08.519Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:08.521Z] Jul 20, 2021 4:24:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:08.547Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"244"}
[warn] ⚠  firestore.rules:25:91 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:15.250Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().pst;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:15.252Z] Jul 20, 2021 4:24:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:15.281Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:18.499Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().post;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:18.503Z] Jul 20, 2021 4:24:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:18.533Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:19.718Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:19.720Z] Jul 20, 2021 4:24:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:19.749Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:21.821Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == ;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:21.823Z] Jul 20, 2021 4:24:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:21.847Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"435"}
[warn] ⚠  firestore.rules:25:101 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:23.543Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:23.545Z] Jul 20, 2021 4:24:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:23.578Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:23.645Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:23.648Z] Jul 20, 2021 4:24:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:23.677Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:26.076Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:26.079Z] Jul 20, 2021 4:24:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:26.109Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:24:26.180Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:24:26.182Z] Jul 20, 2021 4:24:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:24:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:24:26.209Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:25:41.620Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:25:41.622Z] Jul 20, 2021 4:25:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:25:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:25:41.649Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"245"}
[warn] ⚠  firestore.rules:24:127 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:25:44.501Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if isAuthenticated();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:25:44.503Z] Jul 20, 2021 4:25:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:25:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:25:44.532Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:03.402Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:03.404Z] Jul 20, 2021 4:26:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:03.431Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"244"}
[warn] ⚠  firestore.rules:26:26 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:04.691Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:();\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:04.693Z] Jul 20, 2021 4:26:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:04.718Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"499"}
[warn] ⚠  firestore.rules:26:26 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:26:27 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:06.756Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:( if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:06.758Z] Jul 20, 2021 4:26:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:06.783Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"500"}
[warn] ⚠  firestore.rules:26:26 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:26:28 - ERROR Unexpected 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:06.856Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:( if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:06.858Z] Jul 20, 2021 4:26:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:06.883Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"500"}
[warn] ⚠  firestore.rules:26:26 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:26:28 - ERROR Unexpected 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:14.307Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:(isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:14.309Z] Jul 20, 2021 4:26:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:14.334Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"272"}
[warn] ⚠  firestore.rules:26:26 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:14.407Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:(isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:14.409Z] Jul 20, 2021 4:26:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:14.434Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"272"}
[warn] ⚠  firestore.rules:26:26 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:17.959Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete:if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:17.960Z] Jul 20, 2021 4:26:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:17.990Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:20.580Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:20.582Z] Jul 20, 2021 4:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:20.612Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:20.681Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID));\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:20.683Z] Jul 20, 2021 4:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:20.712Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:40.259Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) ;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:40.262Z] Jul 20, 2021 4:26:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:40.291Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:42.618Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) &&;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:42.620Z] Jul 20, 2021 4:26:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:42.644Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"435"}
[warn] ⚠  firestore.rules:26:134 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:53.267Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && ;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:53.269Z] Jul 20, 2021 4:26:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:53.293Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"435"}
[warn] ⚠  firestore.rules:26:135 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:26:53.367Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && ;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:26:53.369Z] Jul 20, 2021 4:26:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:26:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:26:53.391Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"435"}
[warn] ⚠  firestore.rules:26:135 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:27:08.311Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:27:08.314Z] Jul 20, 2021 4:27:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:27:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:27:08.343Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:27:09.201Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:27:09.203Z] Jul 20, 2021 4:27:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:27:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:27:09.233Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T07:28:19.329Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.332Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.734Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.735Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.843Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.846Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:19.892Z] Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:20.182Z] Jul 20, 2021 4:28:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:28:20.432Z] Jul 20, 2021 4:28:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:28:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.307Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.310Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.651Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.652Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.760Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.761Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:38.873Z] Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:39.181Z] Jul 20, 2021 4:29:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:29:39.285Z] Jul 20, 2021 4:29:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:29:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:07.787Z] Jul 20, 2021 4:30:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:07.789Z] Jul 20, 2021 4:30:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.117Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.127Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.226Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.236Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.327Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.617Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:30:08.717Z] Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:31:05.011Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:31:05.013Z] Jul 20, 2021 4:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:05.039Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"262"}
[warn] ⚠  firestore.rules:25:48 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:31:08.480Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated()  isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:31:08.482Z] Jul 20, 2021 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:08.508Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"262"}
[warn] ⚠  firestore.rules:25:49 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:31:08.582Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated()  isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:31:08.584Z] Jul 20, 2021 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:08.608Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"262"}
[warn] ⚠  firestore.rules:25:49 - ERROR Unexpected 'isUserAuthenticated'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:31:12.710Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:31:12.713Z] Jul 20, 2021 4:31:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:12.744Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T07:31:35.331Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nJul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.343Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.687Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.695Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.697Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.802Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.807Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:35.807Z] Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:55.785Z] Jul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Jul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nJul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:55.807Z] Jul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.135Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.144Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.171Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.260Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.262Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:31:56.288Z] Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:31:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:14.700Z] Jul 20, 2021 4:33:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.063Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.451Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.451Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.628Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.874Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:15.874Z] Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:16.046Z] Jul 20, 2021 4:33:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:33:16.139Z] Jul 20, 2021 4:33:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:33:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:34:08.281Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:34:08.283Z] Jul 20, 2021 4:34:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:34:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:34:08.313Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T07:35:57.801Z] Jul 20, 2021 4:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:58.285Z] Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:58.675Z] Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:58.675Z] Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:58.864Z] Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:59.094Z] Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nJul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:59.271Z] Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:35:59.368Z] Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:37:07.864Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if  isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:37:07.866Z] Jul 20, 2021 4:37:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:07.898Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:37:07.964Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if  isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:37:07.969Z] Jul 20, 2021 4:37:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:07.998Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:37:10.164Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:37:10.166Z] Jul 20, 2021 4:37:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:10.197Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T07:37:10.264Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T07:37:10.266Z] Jul 20, 2021 4:37:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:10.295Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T07:37:28.727Z] Jul 20, 2021 4:37:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.062Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.460Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.460Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.640Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.858Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:29.858Z] Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:30.035Z] Jul 20, 2021 4:37:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T07:37:30.132Z] Jul 20, 2021 4:37:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 4:37:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:16:25.822Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverI)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:16:25.827Z] Jul 20, 2021 5:16:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:25.833Z] Jul 20, 2021 5:16:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:25.871Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T08:16:51.448Z] Jul 20, 2021 5:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:51.934Z] Jul 20, 2021 5:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.345Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.345Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.530Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.751Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.751Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:52.934Z] Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:53.825Z] Jul 20, 2021 5:16:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:53.825Z] Jul 20, 2021 5:16:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:54.006Z] Jul 20, 2021 5:16:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:16:54.105Z] Jul 20, 2021 5:16:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:16:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:17:24.687Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userI) || isUserAuthenticated(incomingData().messageReceiverI)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:17:24.688Z] Jul 20, 2021 5:17:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:24.719Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T08:17:39.420Z] Jul 20, 2021 5:17:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:39.752Z] Jul 20, 2021 5:17:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.108Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.108Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.286Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.500Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.500Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.675Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.885Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:40.885Z] Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:41.059Z] Jul 20, 2021 5:17:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:41.155Z] Jul 20, 2021 5:17:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:17:51.373Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      // allow read: if isUserAuthenticated(existingData().userID) || isUserAuthenticated(existingData().messageReceiverID);\n      // allow write: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:17:51.375Z] Jul 20, 2021 5:17:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:17:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:17:51.405Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:30:42.602Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read, write: if isAuthenticated();\n      \n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:30:42.604Z] Jul 20, 2021 5:30:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:30:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:30:42.634Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:30:47.655Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isAuthenticated();\n\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:30:47.656Z] Jul 20, 2021 5:30:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:30:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:30:47.687Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:09.434Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:09.436Z] Jul 20, 2021 5:35:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:09.466Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:11.661Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:11.663Z] Jul 20, 2021 5:35:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:11.694Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:11.763Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:11.768Z] Jul 20, 2021 5:35:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:11.803Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:15.605Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:15.606Z] Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:15.636Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:15.706Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:15.709Z] Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:15.740Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:15.859Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:15.861Z] Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:15.893Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:35:15.947Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomID} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:35:15.949Z] Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:35:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:35:15.976Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:37:57.329Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postID} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:37:57.331Z] Jul 20, 2021 5:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:37:57.363Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:38:06.398Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:38:06.400Z] Jul 20, 2021 5:38:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:38:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:38:06.430Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T08:51:49.451Z] Jul 20, 2021 5:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:49.808Z] Jul 20, 2021 5:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:50.755Z] Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:50.755Z] Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:50.954Z] Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.182Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.182Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.361Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.587Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.587Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.778Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:51.875Z] Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T08:51:58.445Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      // allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T08:51:58.447Z] Jul 20, 2021 5:51:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:51:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:51:58.480Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T08:52:12.161Z] Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:12.511Z] Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:12.870Z] Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:12.870Z] Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.052Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.270Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.271Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.449Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.668Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.669Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.841Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T08:52:13.933Z] Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 5:52:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:01:09.273Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:01:09.276Z] Jul 20, 2021 6:01:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:01:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:01:09.313Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:02:55.835Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      // allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:02:55.838Z] Jul 20, 2021 6:02:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:02:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:02:55.871Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T09:03:20.436Z] Jul 20, 2021 6:03:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:20.874Z] Jul 20, 2021 6:03:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:21.917Z] Jul 20, 2021 6:03:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:21.917Z] Jul 20, 2021 6:03:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:22.119Z] Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:22.184Z] Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:22.186Z] Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:27.533Z] Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:27.710Z] Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:27.931Z] Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:27.932Z] Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:28.144Z] Jul 20, 2021 6:03:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:03:28.243Z] Jul 20, 2021 6:03:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:03:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:04:21.592Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:04:21.594Z] Jul 20, 2021 6:04:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:04:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:04:21.629Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-07-20T09:04:58.648Z] Jul 20, 2021 6:04:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:04:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:04:59.004Z] Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:04:59.203Z] Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:04:59.208Z] Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:04:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:06.206Z] Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:06.446Z] Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:06.685Z] Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:06.685Z] Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:06.872Z] Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:07.095Z] Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:07.095Z] Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:07.271Z] Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:05:07.369Z] Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:28.494Z] Jul 20, 2021 6:06:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:28.843Z] Jul 20, 2021 6:06:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:29.038Z] Jul 20, 2021 6:06:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:29.041Z] Jul 20, 2021 6:06:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:35.836Z] Jul 20, 2021 6:06:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.031Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.288Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.289Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.461Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.674Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.674Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.852Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:06:36.951Z] Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:21.738Z] Jul 20, 2021 6:08:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:22.074Z] Jul 20, 2021 6:08:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:22.859Z] Jul 20, 2021 6:08:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:23.848Z] Jul 20, 2021 6:08:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.040Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.259Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.260Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.436Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.648Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.648Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.825Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:08:24.917Z] Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:08:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:17:20.988Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if ;\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:17:20.990Z] Jul 20, 2021 6:17:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:17:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:17:21.019Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"268"}
[warn] ⚠  firestore.rules:6:22 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:17:28.067Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData);\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:17:28.069Z] Jul 20, 2021 6:17:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:17:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:17:28.100Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2757"}
[warn] ⚠  firestore.rules:6:42 - WARNING Invalid variable name: incomingData. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:17:29.418Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData());\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:17:29.419Z] Jul 20, 2021 6:17:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:17:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:17:29.449Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:17:33.316Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData().);\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:17:33.318Z] Jul 20, 2021 6:17:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:17:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:17:33.345Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"241"}
[warn] ⚠  firestore.rules:6:57 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:17:35.938Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData().id);\n      allow create;\n      allow update: if isAuthenticated();\n      allow delete: if isUserAuthenticated(incomingData().userID) && incomingData().deletedAccount == false;\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:17:35.940Z] Jul 20, 2021 6:17:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:17:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:17:35.969Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:20:41.655Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData().id);\n      allow create;\n      allow update: if isAuthenticated();\n      \n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:20:41.661Z] Jul 20, 2021 6:20:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:20:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:20:41.692Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:20:43.532Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read: if isUserAuthenticated(incomingData().id);\n      allow create;\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:20:43.534Z] Jul 20, 2021 6:20:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:20:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:20:43.565Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:27:33.960Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create;\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:27:33.962Z] Jul 20, 2021 6:27:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:27:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:27:33.991Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:33:43.715Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().userID);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:33:43.716Z] Jul 20, 2021 6:33:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:33:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:33:43.747Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:33:50.851Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:33:50.853Z] Jul 20, 2021 6:33:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:33:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:33:50.889Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:33:51.739Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:33:51.741Z] Jul 20, 2021 6:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:33:51.769Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-20T09:33:51.840Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create, update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-20T09:33:51.841Z] Jul 20, 2021 6:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2021 6:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-20T09:33:51.871Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:29:58.563Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow createupdate: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:29:58.622Z] Jul 21, 2021 10:29:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:29:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:29:58.685Z] Jul 21, 2021 10:29:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:29:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:29:58.832Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2758"}
[warn] ⚠  firestore.rules:32:15 - WARNING Invalid method name: createupdate. 
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:05.284Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: ifupdate: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:05.297Z] Jul 21, 2021 10:30:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:05.366Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"499"}
[warn] ⚠  firestore.rules:32:23 - ERROR Missing 'if' before conditional expression. 
[warn] ⚠  firestore.rules:32:31 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:08.989Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:08.994Z] Jul 21, 2021 10:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:09.021Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"270"}
[warn] ⚠  firestore.rules:33:9 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:09.088Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:09.090Z] Jul 21, 2021 10:30:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:09.115Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"270"}
[warn] ⚠  firestore.rules:33:9 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:13.740Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:13.742Z] Jul 21, 2021 10:30:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:13.770Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:32:25 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:13.841Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:13.843Z] Jul 21, 2021 10:30:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:13.869Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:32:25 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:15.520Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if ;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:15.525Z] Jul 21, 2021 10:30:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:15.550Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:32:26 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:30.879Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:30.882Z] Jul 21, 2021 10:30:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:30.912Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:53.272Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUser);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:53.275Z] Jul 21, 2021 10:30:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:53.308Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:54.129Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:54.132Z] Jul 21, 2021 10:30:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:54.164Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:58.293Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || ;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:58.295Z] Jul 21, 2021 10:30:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:58.320Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:32:76 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:30:58.393Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || ;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:30:58.395Z] Jul 21, 2021 10:30:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:30:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:30:58.422Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"434"}
[warn] ⚠  firestore.rules:32:76 - ERROR mismatched input ';' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:02.892Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated;\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:02.894Z] Jul 21, 2021 10:31:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:02.925Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2767"}
[warn] ⚠  firestore.rules:32:76 - WARNING Invalid variable name: isUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:04.398Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:04.402Z] Jul 21, 2021 10:31:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:04.433Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2796"}
[warn] ⚠  firestore.rules:32:76 - WARNING Incorrect number of arguments supplied to function: isUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:07.077Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:07.081Z] Jul 21, 2021 10:31:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:07.113Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2760"}
[warn] ⚠  firestore.rules:32:96 - WARNING Invalid variable name: incomingData. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:08.112Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData());\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:08.116Z] Jul 21, 2021 10:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:08.147Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:08.213Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData());\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:08.217Z] Jul 21, 2021 10:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:08.245Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:10.306Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:10.308Z] Jul 21, 2021 10:31:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:10.336Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"245"}
[warn] ⚠  firestore.rules:32:111 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:12.257Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:12.260Z] Jul 21, 2021 10:31:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:12.286Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"245"}
[warn] ⚠  firestore.rules:32:111 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:14.750Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().review);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:14.752Z] Jul 21, 2021 10:31:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:14.786Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:17.779Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewer);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:17.782Z] Jul 21, 2021 10:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:17.813Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:17.879Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewer);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:17.880Z] Jul 21, 2021 10:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:17.910Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:19.089Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:19.096Z] Jul 21, 2021 10:31:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:19.127Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:31:31.569Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n        allow update: if isAuthenticated();\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:31:31.572Z] Jul 21, 2021 10:31:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:31:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:31:31.601Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:32:27.978Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:32:27.980Z] Jul 21, 2021 10:32:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:32:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:32:28.010Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:42.711Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read ;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:42.717Z] Jul 21, 2021 10:35:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:42.749Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:44.935Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: ;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:44.938Z] Jul 21, 2021 10:35:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:44.962Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"244"}
[warn] ⚠  firestore.rules:31:21 - ERROR Unexpected ';'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:49.299Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: if ;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:49.301Z] Jul 21, 2021 10:35:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:49.328Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:31:24 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:53.111Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: if isAuthenticated;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:53.113Z] Jul 21, 2021 10:35:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:53.144Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2763"}
[warn] ⚠  firestore.rules:31:24 - WARNING Invalid variable name: isAuthenticated. 
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:54.129Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:54.131Z] Jul 21, 2021 10:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:54.162Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:54.228Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:54.230Z] Jul 21, 2021 10:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:54.256Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:35:59.532Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read: if ;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:35:59.534Z] Jul 21, 2021 10:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:35:59.559Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:31:24 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:01.809Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:01.811Z] Jul 21, 2021 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:01.840Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:09.104Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if ;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:09.106Z] Jul 21, 2021 10:36:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:09.131Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:36:24 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:12.864Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated;\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:12.866Z] Jul 21, 2021 10:36:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:12.896Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2763"}
[warn] ⚠  firestore.rules:36:24 - WARNING Invalid variable name: isAuthenticated. 
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:13.864Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow write: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:13.866Z] Jul 21, 2021 10:36:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:13.897Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:23.894Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:23.896Z] Jul 21, 2021 10:36:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:23.927Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:32.997Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:32.999Z] Jul 21, 2021 10:36:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:33.023Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"276"}
[warn] ⚠  firestore.rules:38:9 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:36.552Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:36.554Z] Jul 21, 2021 10:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:36.586Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:36.653Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:36.655Z] Jul 21, 2021 10:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:36.681Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:37.654Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create:\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:37.656Z] Jul 21, 2021 10:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:37.682Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"247"}
[warn] ⚠  firestore.rules:38:9 - ERROR Unexpected 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:44.798Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:44.800Z] Jul 21, 2021 10:36:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:44.830Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2763"}
[warn] ⚠  firestore.rules:37:26 - WARNING Invalid variable name: isAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:45.800Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated;\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:45.802Z] Jul 21, 2021 10:36:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:45.832Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2763"}
[warn] ⚠  firestore.rules:37:26 - WARNING Invalid variable name: isAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:49.060Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated(;)\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:49.063Z] Jul 21, 2021 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:49.089Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"471"}
[warn] ⚠  firestore.rules:37:42 - ERROR Unexpected ';'. 
[warn] ⚠  firestore.rules:37:43 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:49.163Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated(;)\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:49.165Z] Jul 21, 2021 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:49.190Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"471"}
[warn] ⚠  firestore.rules:37:42 - ERROR Unexpected ';'. 
[warn] ⚠  firestore.rules:37:43 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:51.337Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:51.341Z] Jul 21, 2021 10:36:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:51.372Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:52.470Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:52.472Z] Jul 21, 2021 10:36:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:52.501Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:36:52.571Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:36:52.573Z] Jul 21, 2021 10:36:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:36:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:36:52.602Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:42:15.410Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:42:15.412Z] Jul 21, 2021 10:42:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:42:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:42:15.443Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:42:28.879Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:42:28.881Z] Jul 21, 2021 10:42:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:42:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:42:28.907Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"244"}
[warn] ⚠  firestore.rules:45:61 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:42:44.766Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:42:44.768Z] Jul 21, 2021 10:42:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:42:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:42:44.803Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:45:47.090Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(incomingData()userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:45:47.093Z] Jul 21, 2021 10:45:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:45:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:45:47.120Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"249"}
[warn] ⚠  firestore.rules:49:58 - ERROR Unexpected 'userID'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:45:49.293Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(incomingData().userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:45:49.295Z] Jul 21, 2021 10:45:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:45:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:45:49.326Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:45:55.381Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:45:55.383Z] Jul 21, 2021 10:45:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:45:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:45:55.413Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:49:51.819Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: ifisUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:49:51.821Z] Jul 21, 2021 10:49:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:49:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:49:51.847Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"272"}
[warn] ⚠  firestore.rules:45:23 - ERROR Missing 'if' before conditional expression. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:49:56.410Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:49:56.413Z] Jul 21, 2021 10:49:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:49:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:49:56.445Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:51:23.159Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:51:23.161Z] Jul 21, 2021 10:51:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:51:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:51:23.193Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:52:48.867Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:52:48.870Z] Jul 21, 2021 10:52:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:52:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:52:48.902Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-21T13:55:09.766Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read, write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-21T13:55:09.768Z] Jul 21, 2021 10:55:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2021 10:55:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-21T13:55:09.799Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:102:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:123:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:124:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:128:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:132:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:135:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:141:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:151:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:44:57.873Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read,\n         write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:44:57.965Z] Jul 23, 2021 11:44:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:44:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:44:58.053Z] Jul 23, 2021 11:44:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:44:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:44:58.294Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:00.028Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read,\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:00.040Z] Jul 23, 2021 11:45:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:00.364Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"244"}
[warn] ⚠  firestore.rules:54:19 - ERROR Unexpected ','. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:03.007Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:03.011Z] Jul 23, 2021 11:45:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:03.047Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:05.453Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:05.457Z] Jul 23, 2021 11:45:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:05.482Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"270"}
[warn] ⚠  firestore.rules:55:9 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:09.376Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isAuthenticated()\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:09.379Z] Jul 23, 2021 11:45:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:09.414Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:10.623Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isAuthenticated();\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:10.625Z] Jul 23, 2021 11:45:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:10.659Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-23T14:45:10.719Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isAuthenticated();\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read;\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-23T14:45:10.721Z] Jul 23, 2021 11:45:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 23, 2021 11:45:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-23T14:45:10.750Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T03:41:46.178Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isAuthenticated();\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T03:41:46.230Z] Jul 24, 2021 12:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 12:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T03:41:46.304Z] Jul 24, 2021 12:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 12:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-07-24T03:41:46.486Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:00:42.344Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{postID} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:00:42.348Z] Jul 24, 2021 1:00:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:00:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:00:42.441Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:01:14.727Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:01:14.735Z] Jul 24, 2021 1:01:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:01:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:01:14.785Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:01:26.741Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{review} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:01:26.759Z] Jul 24, 2021 1:01:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:01:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:01:26.795Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:01:26.839Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{review} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:01:26.841Z] Jul 24, 2021 1:01:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:01:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:01:26.876Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:01:28.639Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userID} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:01:28.641Z] Jul 24, 2021 1:01:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:01:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:01:28.678Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:02:06.200Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{userI} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:02:06.204Z] Jul 24, 2021 1:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:02:06.238Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:02:30.224Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:02:30.229Z] Jul 24, 2021 1:02:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:02:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:02:30.268Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1010"}
[warn] ⚠  firestore.rules:35:21 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:35:23 - ERROR The 'match' body must contain at least one declaration. 
[warn] ⚠  firestore.rules:35:25 - ERROR Unexpected '{'. 
[warn] ⚠  firestore.rules:98:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:02:32.725Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow write: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:02:32.730Z] Jul 24, 2021 1:02:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:02:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:02:32.761Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:23.124Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow : if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:23.128Z] Jul 24, 2021 1:03:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:23.157Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"504"}
[warn] ⚠  firestore.rules:55:15 - ERROR Expected at least one 'operation' after 'allow'. 
[warn] ⚠  firestore.rules:55:15 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:25.367Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:25.370Z] Jul 24, 2021 1:03:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:25.404Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:103:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:124:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:125:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:129:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:133:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:136:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:142:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:152:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:30.035Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:30.038Z] Jul 24, 2021 1:03:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:30.065Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"276"}
[warn] ⚠  firestore.rules:58:7 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:33.759Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:33.762Z] Jul 24, 2021 1:03:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:33.796Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:35.453Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:35.456Z] Jul 24, 2021 1:03:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:35.482Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:58:7 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:37.667Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:37.672Z] Jul 24, 2021 1:03:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:37.701Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"270"}
[warn] ⚠  firestore.rules:58:7 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:39.967Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if ;\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:39.970Z] Jul 24, 2021 1:03:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:39.996Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:56:26 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:48.253Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:48.256Z] Jul 24, 2021 1:03:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:48.287Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:51.537Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:51.539Z] Jul 24, 2021 1:03:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:51.579Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:53.750Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:53.753Z] Jul 24, 2021 1:03:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:53.776Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"276"}
[warn] ⚠  firestore.rules:59:7 - ERROR Expected at least one 'operation' after 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:55.661Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:55.663Z] Jul 24, 2021 1:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:55.704Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:57.285Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:57.288Z] Jul 24, 2021 1:03:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:57.319Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:59:7 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:57.386Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: \n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:57.389Z] Jul 24, 2021 1:03:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:57.416Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"243"}
[warn] ⚠  firestore.rules:59:7 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:03:59.053Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:03:59.055Z] Jul 24, 2021 1:03:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:03:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:03:59.082Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"270"}
[warn] ⚠  firestore.rules:59:7 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:04:00.714Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if;\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:04:00.716Z] Jul 24, 2021 1:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:04:00.744Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:57:25 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:04:00.815Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if;\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:04:00.817Z] Jul 24, 2021 1:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:04:00.846Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:57:25 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:04:02.236Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if ;\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:04:02.239Z] Jul 24, 2021 1:04:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:04:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:04:02.266Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"271"}
[warn] ⚠  firestore.rules:57:26 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:04:09.082Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:04:09.083Z] Jul 24, 2021 1:04:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:04:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:04:09.114Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:04:09.183Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:04:09.185Z] Jul 24, 2021 1:04:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:04:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:04:09.216Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:14:41.098Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if iisUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:14:41.100Z] Jul 24, 2021 1:14:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:14:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:14:41.137Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2768"}
[warn] ⚠  firestore.rules:54:24 - WARNING Invalid function name: iisUserAuthenticated. 
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:14:58.076Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isAuthenticated();\n        allow delete: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:14:58.078Z] Jul 24, 2021 1:14:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:14:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:14:58.109Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:15:55.774Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isAuthenticated();\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:15:55.776Z] Jul 24, 2021 1:15:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:15:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:15:55.809Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:17:25.875Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n        // allow write: if isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().receiveUserID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:17:25.877Z] Jul 24, 2021 1:17:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:17:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:17:25.909Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:17:30.207Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:17:30.209Z] Jul 24, 2021 1:17:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:17:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:17:30.241Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:105:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:126:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:127:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:131:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:135:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:144:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:154:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:17:32.449Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:17:32.451Z] Jul 24, 2021 1:17:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:17:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:17:32.483Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:17:32.550Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    match /{paths=**}/notifications/{notificationId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:17:32.553Z] Jul 24, 2021 1:17:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:17:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:17:32.584Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:104:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:122:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:125:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:126:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:130:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:133:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:134:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:143:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:153:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:29.068Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n    \n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:29.071Z] Jul 24, 2021 1:18:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:29.104Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2510"}
[warn] ⚠  firestore.rules:101:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:119:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:122:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:123:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:127:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:130:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:131:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:134:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:140:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:150:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:30.977Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:30.981Z] Jul 24, 2021 1:18:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:31.011Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2509"}
[warn] ⚠  firestore.rules:99:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:117:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:120:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:125:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:129:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:148:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:32.023Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:32.025Z] Jul 24, 2021 1:18:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:32.056Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2509"}
[warn] ⚠  firestore.rules:99:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:117:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:120:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:125:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:129:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:148:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:32.122Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:32.124Z] Jul 24, 2021 1:18:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:32.155Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2509"}
[warn] ⚠  firestore.rules:99:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:117:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:120:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:121:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:125:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:128:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:129:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:132:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:138:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:148:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:35.463Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:35.465Z] Jul 24, 2021 1:18:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:35.497Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2509"}
[warn] ⚠  firestore.rules:98:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:116:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:119:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:124:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:128:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-07-24T04:18:35.561Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/happyhorse-bc5f6:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userID} {\n      allow read;\n      allow create: if isUserAuthenticated(incomingData().id);\n      allow update: if isAuthenticated();\n\n      match /posts/{postID} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().userID);\n        allow update: if isUserAuthenticated(incomingData().userID) || request.auth.uid in incomingData().sendMessageUserIDs || request.auth.uid in getAfterData(documentPath([\"users\",incomingData().userID,\"posts\",incomingData().postID])).sendMessageUserIDs;\n        allow delete: if isUserAuthenticated(incomingData().userID);\n\n        match /chatrooms/{sendUserID} {\n          allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow create: if isUserAuthenticated(incomingData().sendUserID) && incomingData().messageCount == 1;\n          allow update: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n          allow delete: if isUserAuthenticated(incomingData().postUserID);\n\n          match /messages/{messageId} {\n            allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n            allow create: if isAuthenticated() && isUserAuthenticated(incomingData().userID) && incomingData().postID == postID;\n            allow delete: if (isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID)) && incomingData().postID == postID;\n          }\n        }\n      }\n\n      match /reviews/{reviewId} {\n        allow read;\n        allow create: if isUserAuthenticated(incomingData().postUserID) || isUserAuthenticated(incomingData().reviewerID);\n      }\n\n      match /filters/{filterId} {\n        allow read: if isAuthenticated();\n        allow create: if isAuthenticated();\n        allow update: if isAuthenticated();\n      }\n\n      match /likePosts/{likePostId} {\n        allow read: if isAuthenticated();\n        allow create: if isUserAuthenticated(incomingData().likePostUserID);\n        allow delete: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().likePostUserID);\n      }\n\n      match /drafts/{draftId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create, update: if isUserAuthenticated(incomingData().userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n\n      match /notifications/{notificationId} {\n        allow read: if isUserAuthenticated(userID);\n        allow create: if isUserAuthenticated(incomingData().sendUserID);\n        allow update: if isUserAuthenticated(userID);\n        allow delete: if isUserAuthenticated(userID);\n      }\n    }\n\n    match /reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviewsOnHold/{reviewsOnHoldId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/posts/{postId} {\n      allow read;\n    }\n\n    match /{paths=**}/chatrooms/{chatroomId} {\n      allow read: if isAuthenticated() && (isUserAuthenticated(incomingData().sendUserID) || isUserAuthenticated(incomingData().postUserID));\n    }\n\n    match /{paths=**}/messages/{messageId} {\n      allow read: if isUserAuthenticated(incomingData().userID) || isUserAuthenticated(incomingData().messageReceiverID);\n    }\n\n    match /{paths=**}/likePosts/{likePostId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated();\n    }\n\n    match /{paths=**}/reviews/{reviewId} {\n      allow read;\n      allow create, update: if isAuthenticated();\n    }\n  }\n}\n\n\n   function documentPath(paths) {\n      return path([\n        ['databases', database, 'documents'].join('/'),\n        paths.join('/')\n      ].join('/'));\n    }\n\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isUserAuthenticated(userID) {\n      return request.auth.uid == userID;\n    }\n\n    function incomingData() {\n      return request.resource.data;\n    }\n\n    function existingData() {\n      return resource.data;\n    }\n\n    function getData(path) {\n      return get(path).data;\n    }\n\n    function getAfterData(path) {\n      return getAfter(path).data;\n    }\n\n    function isRequestedTime(time) {\n      return time == request.time;\n    }\n\n    function validateString(text, min, max) {\n      return text is string\n        && min <= text.size()\n        && text.size() <= max;\n    }\n\n    function validateNumber(num, min, max) {\n      return num is number\n        && min <= num\n        && num <= max;\n    }\n\n    function dataDiff() {\n      return incomingData().diff(existingData());\n    }\n\n    function isNotChanged(keys) {\n      let affectedKeys = dataDiff().affectedKeys();\n      return !affectedKeys.hasAny(keys.toSet());\n    }\n"}]}}
[debug] [2021-07-24T04:18:35.563Z] Jul 24, 2021 1:18:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 24, 2021 1:18:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-07-24T04:18:35.594Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2509"}
[warn] ⚠  firestore.rules:98:23 - WARNING Invalid variable name: database. 
[warn] ⚠  firestore.rules:116:14 - WARNING Invalid variable name: resource. 
[warn] ⚠  firestore.rules:119:14 - WARNING Unused function: getData. 
[warn] ⚠  firestore.rules:120:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:124:14 - WARNING Call to service function 'getAfter' occurs outside of defining scope. 
[warn] ⚠  firestore.rules:127:14 - WARNING Unused function: isRequestedTime. 
[warn] ⚠  firestore.rules:128:22 - WARNING Invalid variable name: request. 
[warn] ⚠  firestore.rules:131:14 - WARNING Unused function: validateString. 
[warn] ⚠  firestore.rules:137:14 - WARNING Unused function: validateNumber. 
[warn] ⚠  firestore.rules:147:14 - WARNING Unused function: isNotChanged. 
[info] ✔  firestore: Rules updated. 
